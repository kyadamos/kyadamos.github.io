<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://kyle.adamos.rip//feed.xml" rel="self" type="application/atom+xml" /><link href="https://kyle.adamos.rip//" rel="alternate" type="text/html" /><updated>2022-04-17T06:07:44+00:00</updated><id>https://kyle.adamos.rip//feed.xml</id><title type="html">kyle.adamos.rip</title><subtitle>a collection of my unfinished projects</subtitle><author><name>kyle adamos</name><email>kyle@adamos.systems</email></author><entry><title type="html">virtual environments (venv)</title><link href="https://kyle.adamos.rip//blog/virtual-environments/" rel="alternate" type="text/html" title="virtual environments (venv)" /><published>2022-03-19T10:46:00+00:00</published><updated>2022-03-19T10:46:00+00:00</updated><id>https://kyle.adamos.rip//blog/virtual-environments</id><content type="html" xml:base="https://kyle.adamos.rip//blog/virtual-environments/">&lt;p&gt;Sometimes (rarely, but sometimes), when I start a new Python project, I run into compatibility issues in the packages that I’ve installed. Whether it be because a function has been renamed, its behavior is different, or the package was written in a different version of Python: compatibility issues are a pain. Virtual environments help resolve this issue by creating a space for your work and saving the particular versions of each package that you install for your project. This way, if you have multiple projects that each use a different version of a certain package, or if someone else would like to begin working on your project at a later date, you or they may download and install the packages as they are versioned in your virtual environment – bypassing any compatibility issues and therefore being able to use your code immediately (assuming that your code in the virtual environment works, haha).&lt;/p&gt;

&lt;p&gt;Although there are other alternatives, I like to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;venv&lt;/code&gt; module. The following instructions are for VS Code on a Windows machine, but you can find machine specific instructions on Python’s Packaging User &lt;a href=&quot;https://packaging.python.org/en/latest/tutorials/installing-packages/#creating-virtual-environments&quot;&gt;Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before I create anything, I make sure that I have Python, pip, and venv installed. You can find the links to download and install them here: &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://pip.pypa.io/en/stable/installation/&quot;&gt;pip&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/venv.html&quot;&gt;venv&lt;/a&gt;. I usually double check that I have pip and venv installed by entering &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip list&lt;/code&gt;; this command shows me all the packages that I have installed on my machine.&lt;/p&gt;

&lt;p&gt;Once I see that I have pip and venv, I create a new workspace in VS Code. You can do this by opening up a fresh window, then going to File &amp;gt; Save Workspace as …&lt;/p&gt;

&lt;p&gt;After creating a new workspace, navigate to the terminal and enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python -m venv &amp;lt;venv-name&amp;gt;&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;venv-name&amp;gt;&lt;/code&gt; is the name of the virtual environment. I usually use the same name as the project with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_venv&lt;/code&gt; at the end, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WorkAutomation_venv&lt;/code&gt;. Now, there should be three new folders in the workspace: “Lib”, “Include”, and “Scripts”, and the python.pythonPath setting should be stated in the settings (easiest to see in the JSON view of the settings).&lt;/p&gt;

&lt;p&gt;Edit the settings of the Workspace (hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl+,&lt;/code&gt; to open up the settings and switch from “User” to “Workspace” if it’s not currently editing the Workspace settings) – specifically, change the python path to the path that your .\Scripts\Python.exe is located within your venv.&lt;/p&gt;

&lt;p&gt;Should look something like:
{
	“python.pythonPath”:
		“C:\path\to\venv\Scripts\python.exe”
}&lt;/p&gt;

&lt;p&gt;Note: the double backslashes are necessary on Windows machines because a single backslash is the escape character (escape from quote).&lt;/p&gt;

&lt;p&gt;Now the venv setup is complete. Once you relaunch your terminal, your workspace should navigate to the new pythonPath from the workspace settings, launching the virtual environment’s Python interpreter and indicating this with ([name of virtual environment]) preceding your terminal input line.&lt;/p&gt;

&lt;p&gt;ex:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(practice_env) PS C:\path\to\venv&amp;gt;&lt;/code&gt;&lt;/p&gt;</content><author><name>kyle</name></author><category term="Blog" /><summary type="html">Sometimes (rarely, but sometimes), when I start a new Python project, I run into compatibility issues in the packages that I’ve installed. Whether it be because a function has been renamed, its behavior is different, or the package was written in a different version of Python: compatibility issues are a pain. Virtual environments help resolve this issue by creating a space for your work and saving the particular versions of each package that you install for your project. This way, if you have multiple projects that each use a different version of a certain package, or if someone else would like to begin working on your project at a later date, you or they may download and install the packages as they are versioned in your virtual environment – bypassing any compatibility issues and therefore being able to use your code immediately (assuming that your code in the virtual environment works, haha).</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://kyle.adamos.rip//jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2021-07-30T09:17:05+00:00</published><updated>2021-07-30T09:17:05+00:00</updated><id>https://kyle.adamos.rip//welcome-to-jekyll</id><content type="html" xml:base="https://kyle.adamos.rip//jekyll/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>kyle adamos</name><email>kyle@adamos.systems</email></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">shopping bot</title><link href="https://kyle.adamos.rip//blog/shopping-bot/" rel="alternate" type="text/html" title="shopping bot" /><published>2021-07-17T09:17:05+00:00</published><updated>2021-07-17T09:17:05+00:00</updated><id>https://kyle.adamos.rip//blog/shopping-bot</id><content type="html" xml:base="https://kyle.adamos.rip//blog/shopping-bot/">&lt;p&gt;Sneakerheads, Funko Pop collectors, PC builders, and many others who buy high-demand items online may be familiar with the disappointment of losing to automated purchasing bots. These automated bots can click the purchase button and paste in credit card and shipping address information within milliseconds; few feel capable of competing with these bots, and even fewer feel capable of creating their own. I see this as a great opportunity to learn programming skills while leveling the playing field against scalpers. After all, technology is a tool to be used to improve peoples’ lives, and if the bots won’t stop, then let’s at least let everyone a chance to combat them.&lt;/p&gt;

&lt;p&gt;Start&lt;/p&gt;

&lt;p&gt;Today, we’ll be using &lt;a href=&quot;https://pypi.org/project/selenium/&quot;&gt;selenium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setup&lt;/p&gt;

&lt;p&gt;I’m using Python to program our bot because it’s easy and there’s a lot of documentation using Python.&lt;/p&gt;</content><author><name>kyle</name></author><category term="Blog" /><summary type="html">Sneakerheads, Funko Pop collectors, PC builders, and many others who buy high-demand items online may be familiar with the disappointment of losing to automated purchasing bots. These automated bots can click the purchase button and paste in credit card and shipping address information within milliseconds; few feel capable of competing with these bots, and even fewer feel capable of creating their own. I see this as a great opportunity to learn programming skills while leveling the playing field against scalpers. After all, technology is a tool to be used to improve peoples’ lives, and if the bots won’t stop, then let’s at least let everyone a chance to combat them.</summary></entry><entry><title type="html">Ardupilot</title><link href="https://kyle.adamos.rip//blog/ardupilot/" rel="alternate" type="text/html" title="Ardupilot" /><published>2021-07-08T09:17:05+00:00</published><updated>2021-07-08T09:17:05+00:00</updated><id>https://kyle.adamos.rip//blog/ardupilot</id><content type="html" xml:base="https://kyle.adamos.rip//blog/ardupilot/">&lt;p&gt;when it comes to flight controllers, pixhawk models are among the highest performing compared to others in the hobbyist market. the pixhawk 1 uses an ARM Cortex M4 CPU with a clock speed of 180 MHz – this is sufficient for quick responses during flight.&lt;/p&gt;

&lt;p&gt;however, with ardupilot, a mission planning software, we are able to also utilize a companion computer, like a raspberry pi. this allows us to allocate motor control and other basic functions to the pixhawk, while giving our vehicle more capabilities. we can think of the flight controller (pixhawk) like the brain’s parietal lobe as well as the sensory and motor cortex: it’s responsible for managing sensory information, which may be gained from a lidar, a gps, or an imu, and then acting in response to this information by controlling the vehicle motors. the companion computer (raspberry pi) is more like the frontal lobe; it is responsible for problem solving and judgment, among other things, so in a vehicle the companion computer may plan paths or classify objects from images.&lt;/p&gt;

&lt;p&gt;in this section, we connect a pixhawk 1 flight controller to a raspberry pi zero w acting as a companion computer.&lt;/p&gt;

&lt;p&gt;i used this tutorial https://www.youtube.com/watch?v=cZVNndOaYCE&amp;amp;t=209s&lt;/p&gt;</content><author><name>kyle adamos</name><email>kyle@adamos.systems</email></author><category term="Blog" /><summary type="html">when it comes to flight controllers, pixhawk models are among the highest performing compared to others in the hobbyist market. the pixhawk 1 uses an ARM Cortex M4 CPU with a clock speed of 180 MHz – this is sufficient for quick responses during flight.</summary></entry></feed>